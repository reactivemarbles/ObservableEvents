// Copyright (c) 2019-2022 ReactiveUI Association Incorporated. All rights reserved.
// ReactiveUI Association Incorporated licenses this file to you under the MIT license.
// See the LICENSE file in the project root for full license information.

namespace ReactiveMarbles.ObservableEvents.SourceGenerator;

/// <summary>
/// Contains constants used throughout the source generator.
/// </summary>
public static class Constants
{
    /// <summary>
    /// The extension method text.
    /// </summary>
    public const string ExtensionMethodText = @"#pragma warning disable

// <auto-generated />

/// <summary>
/// Extension methods to generate IObservable for contained events on the class.
/// </summary>
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
[global::System.Diagnostics.DebuggerNonUserCode]
[global::System.Reflection.Obfuscation(Exclude=true)]
[global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
internal static partial class ObservableGeneratorExtensions
{
    /// <summary>
    /// Gets observable wrappers for all the events contained within the class.
    /// </summary>
    /// <returns>The events if available.</returns>
    public static NullEvents Events<T>(this T eventHost)
    {
        return default(NullEvents);
    }
}

/// <summary>
/// Generates a IObservable`T` wrapper for the specified type.
/// </summary>
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
[global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
[global::System.AttributeUsage(global::System.AttributeTargets.Assembly)]
internal class GenerateStaticEventObservablesAttribute : global::System.Attribute
{
    /// <summary>
    /// Initializes a new instance of the <see cref=""GenerateStaticEventObservablesAttribute""/> class.
    /// </summary>
    /// <param name=""type"">The static type to generate event observable wrappers for.</param>
    public GenerateStaticEventObservablesAttribute(global::System.Type type)
    {
        Type = type;
    }
        
    /// <summary>Gets the Type to generate the static event observable wrappers for.</summary>
    public global::System.Type Type { get; }
}

internal struct NullEvents
{
}";
}

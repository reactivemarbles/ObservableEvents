name: Release

on:
  pull_request:
    types:
    - closed
    branches: [ main ]

env:
  configuration: Release
  validRelease: ${{ contains(github.event.pull_request.labels.*.name, 'release') }}

jobs:
  release:
    runs-on: windows-latest

    steps:
      - name: Is Release
        run: echo ${{ env.validRelease }}
        
      - name: Test
        if: ${{ env.validRelease == true }}
        run: Echo "hello world"
        
    # steps:
    # - name: Checkout
    #   uses: actions/checkout@v2
    #   if: ${{ env.validRelease }}      
    #   with:
    #     fetch-depth: 0

    # - name: 

    # - name: Install .NET Core
    #   uses: actions/setup-dotnet@v1
    #   if: ${{ env.validRelease }}      
    #   with:
    #     dotnet-version: '3.1.x'

    # - name: Install Latest NuGet
    #   uses: nuget/setup-nuget@v1
    #   if: ${{ env.validRelease }}      
    #   with:
    #     nuget-api-key: ${{ secrets.NUGET_API_KEY }}
    #     nuget-version: '5.x'

    # - name: NBGV
    #   uses: dotnet/nbgv@master
    #   if: ${{ env.validRelease }}      
    #   with:
    #     setAllVars: true

    # - name: Restore NuGet Packages
    #   if: ${{ env.validRelease }}      
    #   run: dotnet restore
    #   working-directory: src

    # - name: Add MSBuild to PATH
    #   if: ${{ env.validRelease }}      
    #   uses: microsoft/setup-msbuild@v1.0.1

    # - name: Build
    #   if: ${{ env.validRelease }}      
    #   run: msbuild /t:build,pack /maxcpucount /p:NoPackageAnalysis=true /verbosity:minimal /p:Configuration=${{ env.configuration }}
    #   working-directory: src

    # - name: Release NuGet packages
    #   if: ${{ env.validRelease }}      
    #   working-directory: src
    #   run: dotnet nuget push **/*.nupkg --api-key ${{ secrets.NUGET_API_KEY }}
